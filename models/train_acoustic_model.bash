#!/bin/bash
#SBATCH -p sm
#SBATCH -n1
#SBATCH -N1-1
#SBATCH -c 4
#SBATCH --gres=gpu:1
#SBATCH --mem=32768
#SBATCH --time=24:00:00
#SBATCH -J train_acoustic_model
#SBATCH --exclude=sls-sm-[5]

echo "STARTING ACOUSTIC MODEL TRAINING JOB"

. ./path.sh
. ./models/base_config.sh

if [ $# -ne 1 ]; then
    echo "Need to provide decoder class name"
    exit 1
fi
decoder_class=$1

echo "Setting up environment..."
export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:/data/sls/u/meng/skanda/cuda/lib64:$LD_LIBRARY_PATH
source activate $TRAIN_ENV
echo "Environment set up."

lang=$CLEAN_RECIPE/exp/tri3/graph
model=$CLEAN_RECIPE/exp/tri3_ali/final.mdl

# Check for training phones files and generate them if they don't exist
echo "Checking for training phone files..."
if [ ! -f $DIRTY_FEATS/train/phones.scp ]; then
    echo "phones.scp not found at $DIRTY_FEATS/train; generating"

    # Alignments already generated by recipe -- just convert

    # Convert each split to PDFs, then concatenate into one SCP file
    for ((split=1;split<=30;split++)); do
        # Convert to uncompressed binary ark file
        # Although it isn't truly a "feature file", we can use copy-feats by first
        # converting to Hao's batch file format
        ali-to-pdf $model ark:"gunzip -c $CLEAN_RECIPE/exp/tri3_ali/ali.$split.gz |" ark,t:- \
            | python3 $PY_UTILS/ali2batch.py \
            | python3 $PY_UTILS/batch2ark.py \
            | copy-feats --compress=false ark:- ark,scp:$DIRTY_FEATS/train/phones.$split.ark,$DIRTY_FEATS/train/phones.$split.scp || exit 1
    done
    cat $DIRTY_FEATS/train/phones.*.scp | sort > $DIRTY_FEATS/train/phones.scp
fi
echo "Train phone files ready"

# Check for dev phones files and generate them if they don't exist
echo "Checking for dev phone files..."
if [ ! -f $DIRTY_FEATS/dev/phones.scp ]; then
    echo "phones.scp not found at $DIRTY_FEATS/dev; generating"

    # Alignments NOT generated by recipe -- need to decode first and get alignments
    align_nj=1
    $STEPS/align_fmllr.sh --nj "$align_nj" --cmd $UTILS/run.pl \
        $CLEAN_RECIPE/data/dev $CLEAN_RECIPE/data/lang $CLEAN_RECIPE/exp/tri3 $DIRTY_FEATS/dev/tri3_ali

    # Convert to PDFs (as uncompressed binary ark file)
    # Although it isn't truly a "feature file", we can use copy-feats by first
    # converting to Hao's batch file format
    ali-to-pdf $model ark:"gunzip -c $DIRTY_FEATS/dev/tri3_ali/ali.1.gz |" ark,t:- \
        | python3 $PY_UTILS/ali2batch.py \
        | python3 $PY_UTILS/batch2ark.py \
        | copy-feats --compress=false ark:- ark,scp:$DIRTY_FEATS/dev/phones.ark,$DIRTY_FEATS/dev/phones.scp || exit 1
fi
echo "Dev phone files ready"

train_log=$LOG_DIR/train_acoustic_model_${decoder_class}.log
if [ -f $train_log ]; then
    # Move old log
    mv $train_log $LOG_DIR/train_acoustic_model_${decoder_class}-$(date +"%F_%T%z").log
fi

echo "Training model..."
python3 models/scripts/train_acoustic_model.py $decoder_class &> $train_log

echo "DONE ACOUSTIC MODEL TRAINING JOB"
